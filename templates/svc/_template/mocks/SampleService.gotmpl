// Code generated by mockery v2.7.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/travelata/{{.service.name}}/domain"
)

// SampleService is an autogenerated mock type for the SampleService type
type SampleService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, sample
func (_m *SampleService) Create(ctx context.Context, sample *domain.Sample) (*domain.Sample, error) {
	ret := _m.Called(ctx, sample)

	var r0 *domain.Sample
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Sample) *domain.Sample); ok {
		r0 = rf(ctx, sample)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Sample)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Sample) error); ok {
		r1 = rf(ctx, sample)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *SampleService) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *SampleService) Get(ctx context.Context, id string) (bool, *domain.Sample, error) {
	ret := _m.Called(ctx, id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 *domain.Sample
	if rf, ok := ret.Get(1).(func(context.Context, string) *domain.Sample); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.Sample)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Search provides a mock function with given fields: ctx, cr
func (_m *SampleService) Search(ctx context.Context, cr *domain.SearchCriteria) (*domain.SearchResponse, error) {
	ret := _m.Called(ctx, cr)

	var r0 *domain.SearchResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.SearchCriteria) *domain.SearchResponse); ok {
		r0 = rf(ctx, cr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.SearchResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.SearchCriteria) error); ok {
		r1 = rf(ctx, cr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, sample
func (_m *SampleService) Update(ctx context.Context, sample *domain.Sample) (*domain.Sample, error) {
	ret := _m.Called(ctx, sample)

	var r0 *domain.Sample
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Sample) *domain.Sample); ok {
		r0 = rf(ctx, sample)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Sample)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Sample) error); ok {
		r1 = rf(ctx, sample)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
