// this file is generated by servgen util based on a template at 2021-06-26 10:37:24 +0300 MSK
package impl

import (
	"context"
	"github.com/travelata/kit"
	"github.com/travelata/kit/common"
	"github.com/travelata/kit/log"
	"github.com/travelata/kit/queue"
	"github.com/travelata/{{.service.name}}/domain"
	"github.com/travelata/{{.service.name}}/errors"
	"github.com/travelata/{{.service.name}}/logger"
	"time"
)

// sample{{Title .service.name}}Impl - implements SampleService interface
type sample{{Title .service.name}}Impl struct {
	common.BaseService
	storage           domain.{{Title .service.name}}Storage               // storage service
	anotherRepository domain.AnotherServiceRepository // another service repository
}

func New{{Title .service.name}}Service(
	storage domain.{{Title .service.name}}Storage,
	anotherRepository domain.AnotherServiceRepository,
	queue queue.Queue,
) domain.SampleService {
	return &sample{{Title .service.name}}Impl{
		storage:           storage,
		anotherRepository: anotherRepository,
		BaseService:       common.BaseService{Queue: queue},
	}
}

func (s *sample{{Title .service.name}}Impl) l() log.CLogger {
	return logger.L().Cmp("sample-{{.service.name}}")
}

func (s *sample{{Title .service.name}}Impl) Create(ctx context.Context, sample *domain.Sample) (*domain.Sample, error) {
	s.l().C(ctx).Mth("create").Dbg()

	// validates name
	if sample.Name == "" {
		return nil, errors.ErrSampleInvalidName(ctx)
	}

	now := time.Now().UTC()
	sample.Id = kit.NewId()
	sample.CreatedAt, sample.UpdatedAt = now, now

	// save to store
	err := s.storage.CreateSample(ctx, sample)
	if err != nil {
		return nil, err
	}

	return sample, nil
}

func (s *sample{{Title .service.name}}Impl) Update(ctx context.Context, sample *domain.Sample) (*domain.Sample, error) {
	s.l().C(ctx).Mth("update").Dbg()

	// check Id isn't empty
	if sample.Id == "" {
		return nil, errors.ErrSampleIdEmpty(ctx)
	}

	// retrieve stored sample by id
	found, stored, err := s.storage.GetSample(ctx, sample.Id)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, errors.ErrSampleNotFound(ctx, sample.Id)
	}

	// validates name
	if sample.Name == "" {
		return nil, errors.ErrSampleInvalidName(ctx)
	}

	// set updated params
	now := time.Now().UTC()
	stored.Name = sample.Name
	stored.UpdatedAt = now

	// save to store
	err = s.storage.UpdateSample(ctx, stored)
	if err != nil {
		return nil, err
	}

	return stored, nil
}

func (s *sample{{Title .service.name}}Impl) Get(ctx context.Context, id string) (bool, *domain.Sample, error) {
	s.l().C(ctx).Mth("get").Dbg()
	return s.storage.GetSample(ctx, id)
}

func (s *sample{{Title .service.name}}Impl) Delete(ctx context.Context, id string) error {
	s.l().C(ctx).Mth("delete").Dbg()

	// check Id isn't empty
	if id == "" {
		return errors.ErrSampleIdEmpty(ctx)
	}

	// retrieve stored sample by id
	found, stored, err := s.storage.GetSample(ctx, id)
	if err != nil {
		return err
	}
	if !found {
		return errors.ErrSampleNotFound(ctx, id)
	}

	// check already deleted
	if stored.DeletedAt != nil {
		return errors.ErrSampleDeleted(ctx, id)
	}

	// set updated params
	now := time.Now().UTC()
	stored.UpdatedAt, stored.DeletedAt = now, &now

	// save to store
	return s.storage.UpdateSample(ctx, stored)
}

func (s *sample{{Title .service.name}}Impl) Search(ctx context.Context, cr *domain.SearchCriteria) (*domain.SearchResponse, error) {
	s.l().Mth("search").C(ctx).Dbg()
	if cr.PagingRequest == nil {
		cr.PagingRequest = &common.PagingRequest{}
	}
	if cr.Size == 0 {
		cr.Size = 100
	}
	if cr.Index == 0 {
		cr.Index = 1
	}
	return s.storage.SearchSamples(ctx, cr)
}
